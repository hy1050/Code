#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <Firebase_ESP_Client.h>
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include "Intro.h"
#include "control.h"
#include <Wire.h>
#include <FS.h>
//--------------------------------------------------Include Library
// Provide the token generation process info.
#include "addons/TokenHelper.h"
// Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"
//--------------------------------------------------
#ifndef STASSID
#define STASSID "Hong Chau"
#define STAPSK  "020274tc"
#endif
//--------------------------------------------------WIFI SSID and Password
const char* ssid = STASSID;
const char* password = STAPSK;
//--------------------------------------------------
#define API_KEY "AIzaSyDOlMgYPeCjjlJkUMGToHu3Iv236adLffg"
#define DATABASE_URL "https://mydb-d35b4-default-rtdb.firebaseio.com/"
//--------------------------------------------------Declare firebase API key
FirebaseData fbdo;
//--------------------------------------------------
FirebaseAuth auth;
FirebaseConfig config;
String DataFromDB = "";
bool signupOK = false;
unsigned long sendDataPrevMillis = 0;
//--------------------------------------------------Firebase setup
ESP8266WebServer server(80); //--> Server on port 80
//--------------------------------------------------
String Incoming_Text = ""; //--> Variable to hold the text that is sent from a web server (web page)
//--------------------------------------------------
void Send_I2C(String Incoming_Text)
{
  int str_len = Incoming_Text.length() + 1;
  char char_array[str_len];
  Incoming_Text.toCharArray(char_array, str_len);

  for (int i = 8; i < 14; i++)
  {
    Wire.beginTransmission(i); /* begin with device address 8 */
    Wire.write(char_array, str_len);
    Wire.endTransmission(); /* stop transmitting */
  }
  Serial.println();
  Incoming_Text = "";
}
//--------------------------------------------------Send I2C function with processed input to 6 blocks
void Process_Incoming_Text()
{
  Serial.println("text : ");
  Serial.println(Incoming_Text);
  if (Incoming_Text.compareTo("77@79@68@69@32@49") == 0) // Mode 1
  {
    Incoming_Text = "272@7890@32@193@78@32"; //ĐỒ ÁN
    Send_I2C(Incoming_Text);
    delay(8000);
    Incoming_Text = "32@32@84@7888@84@32"; // TỐT
    Send_I2C(Incoming_Text);
    delay(8000);
    Incoming_Text = "78@71@72@73@7878@80"; // NGHIỆP
    Send_I2C(Incoming_Text);
    delay(8000);
    Incoming_Text = "32@50@48@50@50@32"; // 2022
    Send_I2C(Incoming_Text);
    delay(8000);
  }
  else if (Incoming_Text.compareTo("77@79@68@69@32@50") == 0) //Mode 2
  {
    for (int i = 0; i < 50; i++)
    {
      Incoming_Text = "272@7890@32@193@78@32"; //ĐỒ ÁN
      Send_I2C(Incoming_Text);
      delay(8000);
      Incoming_Text = "32@32@84@7888@84@32"; // TỐT
      Send_I2C(Incoming_Text);
      delay(8000);
      Incoming_Text = "78@71@72@73@7878@80"; // NGHIỆP
      Send_I2C(Incoming_Text);
      delay(8000);
      Incoming_Text = "32@50@48@50@50@32"; // 2022
      Send_I2C(Incoming_Text);
      delay(8000);
    }
  }
  else if (Incoming_Text.compareTo("77@79@68@69@32@51") == 0) //Mode 3
  {
    Incoming_Text = "36@32@32@32@32@36"; //1-0-0-0-0-1
    Send_I2C(Incoming_Text);
    delay(3000);
    Incoming_Text = "36@36@32@32@36@36"; // 1-1-0-0-1-1
    Send_I2C(Incoming_Text);
    delay(3000);
    Incoming_Text = "36@36@36@36@36@36"; // 1-1-1-1-1-1
    Send_I2C(Incoming_Text);
    delay(3000);
    Incoming_Text = "32@32@32@32@32@32"; // 0-0-0-0-0-0
    Send_I2C(Incoming_Text);
    delay(3000);
  }
  else if (Incoming_Text.compareTo("77@79@68@69@32@52") == 0) // Mode 4
  {
    Incoming_Text = "65@32@32@32@32@32";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "65@65@32@32@32@32";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "65@65@65@32@32@32";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "65@65@65@65@32@32";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "65@65@65@65@65@32";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "65@65@65@65@65@65";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "32@32@32@32@32@32";
    Send_I2C(Incoming_Text);
    delay(2500);
    Incoming_Text = "32@32@32@32@32@65";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "32@32@32@32@65@65";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "32@32@32@65@65@65";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "32@32@65@65@65@65";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "32@65@65@65@65@65";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "65@65@65@65@65@65";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "32@32@32@32@32@32";
    Send_I2C(Incoming_Text);
    delay(2500);
    Incoming_Text = "32@32@65@65@32@32";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "32@65@65@65@65@32";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "65@65@65@65@65@65";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "32@32@32@32@32@32";
    Send_I2C(Incoming_Text);
    delay(2500);
    Incoming_Text = "65@32@32@32@32@65";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "65@65@32@32@65@65";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "65@65@65@65@65@65";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "32@32@32@32@32@32";
    Send_I2C(Incoming_Text);
    delay(2500);
    Send_I2C(Incoming_Text);
  }
  else if (Incoming_Text.compareTo("77@79@68@69@32@53") == 0) // Mode 5
  {
    Incoming_Text = "60@32@32@32@32@32";
    Send_I2C(Incoming_Text);
    delay(2500);
    Incoming_Text = "60@60@32@32@32@32";
    Send_I2C(Incoming_Text);
    delay(2500);
    Incoming_Text = "60@60@60@32@32@32";
    Send_I2C(Incoming_Text);
    delay(2500);
    Incoming_Text = "60@60@60@60@32@32";
    Send_I2C(Incoming_Text);
    delay(2500);
    Incoming_Text = "60@60@60@60@60@32";
    Send_I2C(Incoming_Text);
    delay(2500);
    Incoming_Text = "60@60@60@60@60@60";
    Send_I2C(Incoming_Text);
    delay(3000);
    Incoming_Text = "62@60@60@60@60@60";
    Send_I2C(Incoming_Text);
    delay(750);
    Incoming_Text = "62@62@60@60@60@60";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "62@62@62@60@60@60";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "62@62@62@62@60@60";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "62@62@62@62@62@60";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "62@62@62@62@62@62";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "47@62@62@62@62@62";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "47@47@62@62@62@62";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "47@47@47@62@62@62";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "47@47@47@47@62@62";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "47@47@47@47@47@62";
    Send_I2C(Incoming_Text);
    delay(500);
    Incoming_Text = "47@47@47@47@47@47";
    Send_I2C(Incoming_Text);
    delay(750);
    Incoming_Text = "32@32@32@32@32@32";
    Send_I2C(Incoming_Text);
    delay(2500);
  }
  else
    Send_I2C(Incoming_Text);
}
//--------------------------------------------------Choose mode to run or normal run
void GetDB()
{
  if (Firebase.RTDB.getString(&fbdo, "Control/UNICODE"))
  {
    if (fbdo.dataType() == "string")
    {
      Incoming_Text = fbdo.stringData();
    }
  }
  else
  {
    Serial.println("FAILED");
    Serial.println("REASON: " + fbdo.errorReason());
  }
}
//--------------------------------------------------Database checking
void handle_NotFound()
{
  server.send(404, "text/plain", "Not found");
}
void handleRoot()
{
  server.send(200, "text/html", Intro_page); //--> Send web page
}

void handleControl()
{
  server.send(200, "text/html", Control_page); //--> Send web page
}

void handle_Incoming_Text()
{
  GetDB();
  Process_Incoming_Text();
}
//--------------------------------------------------Webserver subroutines
void setup() {
  Serial.begin(9600);
  Wire.begin(D2, D1); // join i2c bus with SDA=D2 and SCL=D1 of NodeMCU --> D2-D1
  delay(100);
//--------------------------------------------------Initial Serial and Wire port
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
//--------------------------------------------------
  if (Firebase.signUp(&config, &auth, "", ""))
  {
    Serial.println("ok");
    signupOK = true;
  }
  else
  {
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }
  config.token_status_callback = tokenStatusCallback; // see addons/TokenHelper.h

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  server.on("/", handleRoot);           //--> Routine to handle at root location. This is to display web page.
  server.on("/control", handleControl); //--> Routine to handle at root location. This is to display web page.

  server.onNotFound(handle_NotFound);
  server.on("/setText", handle_Incoming_Text); //--> Routine to handle handle_Incoming_Text Subroutines
  server.begin();                              //--> Start server
  Serial.println("HTTP Server Started");
//-------------------------------------------------- Webserver initial
  // Port defaults to 8266
  // ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  // ArduinoOTA.setHostname("myesp8266");

  // No authentication by default
  // ArduinoOTA.setPassword("admin");

  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");
  ArduinoOTA.setPassword((const char *)"2022");
  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      type = "sketch";
    } else { // U_FS
      type = "filesystem";
    }

    // NOTE: if updating FS this would be the place to unmount FS using FS.end()
    Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Failed");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Begin Failed");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Connect Failed");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Receive Failed");
    } else if (error == OTA_END_ERROR) {
      Serial.println("End Failed");
    }
  });
  ArduinoOTA.begin();
  //--------------------------------------------------OTA Initial
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}
void loop() {
  ArduinoOTA.handle();
  server.handleClient(); //--> Handle client requests
}